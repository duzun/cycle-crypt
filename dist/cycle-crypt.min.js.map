{"version":3,"file":"cycle-crypt.min.js","sources":["../node_modules/string-encode/string-encode.js","../lib/randomBytes.js","../CycleCrypt.js","../cycle-crypt.js"],"sourcesContent":["/**\n * Convert different types of JavaScript String to/from Uint8Array.\n *\n * @author Dumitru Uzun (DUzun.Me)\n * @version 0.2.2\n */\n\n/*requires Uint8Array*/\n/*globals escape, unescape, encodeURI, decodeURIComponent, btoa*/\n\nexport const chr = String.fromCharCode;\n\nexport function ord(chr) {\n    return chr.charCodeAt(0);\n}\n\nexport function buffer2bin(buf) {\n    buf = view8(buf);\n    return chr.apply(String, buf);\n}\n\n/**\n * Get the hex representation of a buffer (TypedArray)\n *\n * @requires String.prototype.padStart()\n *\n * @param   {TypedArray}  buf Uint8Array is desirable, cause it is consistent regardless of the endianness\n *\n * @return  {String} The hex representation of the buf\n */\nexport function buffer2hex(buf) {\n    const bpe = buf.BYTES_PER_ELEMENT << 1;\n    return buf.reduce((r, c) => r += (c >>> 0).toString(16).padStart(bpe,'0'), '');\n}\n\nexport function buffer2str(buf, asUtf8) {\n    if(typeof buf == 'string') return buf;\n    buf = buffer2bin(buf);\n    if (asUtf8 !== false && !isASCII(buf)) {\n        if(asUtf8) {\n            buf = utf8Decode(buf);\n        } else if(asUtf8 == undefined) {\n            try {\n                buf = utf8Decode(buf);\n            } catch(err) {}\n        }\n    }\n    return buf;\n}\n\nexport function str2buffer(str, asUtf8) {\n    str = String(str);\n    if(asUtf8 == undefined) {\n        // Some guessing\n        asUtf8 = hasMultibyte(str); // || !isASCII(str)\n    }\n    if (asUtf8) {\n        str = utf8Encode(str);\n    }\n\n    // Smaller x2\n    // return new Uint8Array(String(str).split('').map(ord));\n\n    // Faster x3-4\n    let len = str.length;\n    const buf = new Uint8Array(len);\n    while(len--) buf[len] = str.charCodeAt(len);\n    return buf;\n}\n\nconst nonHexDigitRE = /[^0-9a-f]/g;\n\n/**\n * Read a hex string into a buffer (Uint8Array), ignoring non-hex chars.\n *\n * @param   {String}  str\n *\n * @return  {Uint8Array}\n */\nexport function hex2buffer(str) {\n    str = str.replace(nonHexDigitRE, '');\n    const len = str.length;\n    const ret = new Uint8Array((len + 1) >>> 1);\n\n    for(let i=0; i<len; i+=2) {\n        ret[i >>> 1] = parseInt(str.slice(i, i+2), 16);\n    }\n\n    return ret;\n}\n\n/**\n * This method is a replacement of Buffer.toString(enc)\n * for Browser, where Buffer is not available.\n *\n * @requires btoa\n *\n * @this {Uint8Array}\n *\n * @param   {String}  enc  'binary' | 'hex' | 'base64' | 'utf8' | undefined\n *\n * @return  {String}\n */\nexport function toString(enc) {\n    // The Node.js equivalent would be something like:\n    // if(typeof Buffer == 'function') {\n    //     if(enc === false) enc = 'binary';\n    //     if(enc === true) enc = 'utf8';\n    //     return Buffer.from(this.buffer, this.byteOffset, this.byteLength).toString(enc);\n    // }\n    switch(enc) {\n        case false:\n        case 'binary': return buffer2bin(this);\n        case 'hex': return buffer2hex(this);\n        case 'base64': return btoa(buffer2bin(this));\n        case 'utf8': enc = true; break;\n    }\n    return buffer2str(this, enc);\n}\n\nexport function view8(buf, start, len) {\n    // If buf is a Buffer, we still want to make it an Uint8Array\n    if(!start && !len && buf instanceof Uint8Array && !buf.copy) return buf;\n    start = start >>> 0;\n    if(len == undefined) len = buf.byteLength - start;\n    return new Uint8Array(buf.buffer, buf.byteOffset+start, len);\n}\n\nlet _isLittleEndian;\nexport function isLittleEndian() {\n    if(_isLittleEndian !== undefined) return _isLittleEndian;\n    _isLittleEndian = !!(new Uint8Array(new Uint16Array([1]).buffer)[0]);\n    isLittleEndian = () => _isLittleEndian;\n    return _isLittleEndian;\n}\n\nexport function switchEndianness32(i) {\n    return (i&0xFF)<<24\n        | (i&0xFF00)<<8\n        | i>>8&0xFF00\n        | i>>24&0xFF\n    ;\n}\n\nexport function guessEncoding(str) {\n    if(hasMultibyte(str)) return 'mb';\n\n    // @todo: test which is faster, utf8bytes() or RegExp\n    if(isHEX(str)) return 'hex';\n    // if(isASCII(str)) return 'ascii';\n    // if(isUTF8(str)) return 'utf8';\n\n    let mbLen = utf8bytes(str);\n    if(mbLen) return 'utf8';\n    if(mbLen === 0) return 'ascii';\n    if(mbLen === false) {\n        mbLen = utf8bytes(str, true);\n        if(mbLen) return '~utf8'; // UTF8, but with async characters at the edges\n    }\n    return 'binary';\n}\n\nconst hasMultibyteRE = /([^\\x00-\\xFF])/;\nconst isHEXRE = /^[0-9a-f\\s]*$/i;\nconst isASCIIRE = /^[\\x00-\\x7F]*$/;\nconst isUTF8RE = /^(?:[\\x00-\\x7F]|[\\xC0-\\xDF][\\x80-\\xBF]|[\\xE0-\\xEF][\\x80-\\xBF][\\x80-\\xBF]|[\\xF0-\\xF7][\\x80-\\xBF][\\x80-\\xBF][\\x80-\\xBF])*$/;\n\nexport function hasMultibyte(str) {\n    let m = hasMultibyteRE.exec(str);\n    return m ? m[1] : false;\n}\n\nexport function isBinary(str) {\n    return !hasMultibyte(str);\n}\n\nexport function isASCII(str) {\n    return isASCIIRE.test(str);\n}\n\nexport function isUTF8(str) {\n    return isUTF8RE.test(str);\n}\n\nexport function isHEX(str) {\n    return isHEXRE.test(str);\n}\n\nexport function utf8bytes(str, allowAsyncChars) {\n    var l = str.length\n    ,   i = 0\n    ,   u = 0\n    ,   c\n    ,   a = -1\n    ,   asy = +!!allowAsyncChars\n    ;\n\n    for( ; i < l ; ) {\n        c = str.charCodeAt(i++);\n        if( c < 0x80 ) continue; // ASCII\n        if( 0xFF <= c ) return false; // has multi-byte\n\n        // async UTF8 character\n        if( (c & 0xC0) == 0x80 ) {\n            // Ignore async UTF8 characters at the beginning\n            if(asy == i) {\n                ++u;\n                ++asy;\n                continue;\n            }\n            return false;\n        }\n\n        // Check sync UTF8 bytes\n        a   = (c & 0xE0) !== 0xC0\n            ? (c & 0xF0) !== 0xE0\n            ? (c & 0xF8) !== 0xF0\n            ? false\n            : 3\n            : 2\n            : 1\n        ;\n        if(!a) return false; // Not an ASCII, nor sync UTF8 bytes\n\n        for( ; (u += 1) && a-- && i < l; ) {\n            c = str.charCodeAt(i++);\n            if((c & 0xC0) !== 0x80) {\n                return false; // Not an ASCII, nor sync UTF8 bytes\n            }\n        }\n    }\n\n    // Ignore async UTF8 characters at the end\n    if(~a && !allowAsyncChars) return false;\n\n    return u;\n}\n\nexport function utf8Encode(str) {\n    return unescape(encodeURI(str));\n}\n\nexport function utf8Decode(str) {\n    return decodeURIComponent(escape(str));\n}\n","/*requires Uint8Array, Uint32Array*/\n\nimport { toString } from 'string-encode';\n\nexport default function randomBytes(size) {\n    const bits = -1 >>> 0;\n\n    let len = size & 3;\n    len = len ? size + 4 - len : size;\n    let ret = new Uint8Array(len);\n    const words = new Uint32Array(ret.buffer);\n    let ent = Date.now();\n\n    len >>= 2;\n    while (len--) {\n        words[len] =\n        ent ^= Math.random() * bits;\n    }\n\n    if(ret.length > size) {\n        ret = ret.slice(0, size);\n    }\n\n    ret.toString = toString;\n    return ret;\n}\n","/*requires Uint8Array, Uint32Array*/\n\nimport randomBytes from './lib/randomBytes';\nimport { str2buffer, view8, toString } from 'string-encode';\n\n/**\n * Variable size symmetric key encryption algorithm.\n * The cipher-key is generated by cycling the input key with a variation of XorShift+ PRNG.\n * The bigger the key-size, the longer the period.\n *\n * @param   {String|ArrayBuffer}  key   The encryption key\n * @param   {String|ArrayBuffer|Boolean} salt\n *              If a string, use it as salt.\n *              If TRUE, generate salt.\n */\nexport default function CycleCrypt(key, salt) {\n    const self = this;\n\n    key = str2buf(key);\n    if (salt === true || salt === undefined) {\n        salt = randomBytes(Math.min(256, key.byteLength << 1));\n    }\n    self.salt = salt;\n    self._key = key = saltKey(key, str2buf(salt));\n}\n\nObject.defineProperties(CycleCrypt.prototype, {\n    constructor: {\n        value: CycleCrypt,\n    },\n\n    /**\n     * Encrypt/decrypt the data and advance the internal state of the cipher-key.\n     *\n     * @param   {String|ArrayBuffer}  data  Data to encrypt\n     *\n     * @return  Uint8Array The encrypted/decrypted data\n     */\n    _: {\n        value: function _(data) {\n            data = str2buf(data);\n            const { dataLength } = data;\n            if (!dataLength) return data;\n\n            const key = this._key;\n            let klen = key.length;\n            let len = data.length;\n            for (let i = 0, k = 0; i < len; ++i, ++k === klen && (k = 0)) {\n                if (!k) mixKey(key);\n                data[i] ^= key[k];\n            }\n\n            data = view8(data, 0, dataLength);\n            data.toString = toString;\n            return data;\n        }\n    },\n\n    /**\n     * Get the number of bytes in the key\n     *\n     * @return  int\n     */\n    keyByteSize: {\n        get() {\n            return this._key.byteLength;\n        }\n    }\n});\n\n// Static methods:\nCycleCrypt.randomBytes = randomBytes; // Uint8Array\nCycleCrypt.toString = toString;\nCycleCrypt.str2buffer = str2buffer; // Uint8Array\nCycleCrypt.str2buf = str2buf; // Uint32Array\n// // CycleCrypt.buf2str = buf2str;\n\n/**\n * Use a variation of Xorshift+ to mix the key\n *\n * @param   Uint32Array $key List of int32 values representing the key\n * @param   int   $rounds Number of rounds to process the key\n *\n * @return  array A mixed key\n */\nfunction mixKey(key, rounds) {\n    let len = key.length;\n    let k = len > 1 ? key[len - 1] : 0;\n\n    if (rounds == undefined) rounds = 1;\n    while (rounds-- > 0) {\n        for (let $i = len; $i--;) {\n            let ki = $i % len;\n            k = key[ki] + k;\n            k ^= k << 13; // 19\n            k ^= k >>> 17; // 15\n            k ^= k << 5; // 27\n            // k >>>= 0;\n            key[ki] = k;\n        }\n    }\n\n    return key;\n}\n\n/**\n * Use a variation of Xorshift+ to salt the key\n *\n * @param   Uint32Array $key\n * @param   Uint32Array $salt\n * @param   int   $rounds Number of rounds to mix the key\n *\n * @return  array A mixed key\n */\nfunction saltKey(key, salt, rounds) {\n    let klen = key.length;\n    let slen = salt.length;\n    if (!slen) return key;\n\n    // make a copy to avoid altering the input salt\n    salt = salt.slice();\n\n    let k = klen > 1 ? key[klen - 1] : 0;\n    let s = slen > 1 ? salt[slen - 1] : 0;\n\n    if (rounds == undefined) rounds = 1;\n    while (rounds-- > 0) {\n        for (let i = Math.max(klen, slen); i--;) {\n            let ki = i % klen;\n            let si = i % slen;\n            k = key[ki] + k;\n            s = salt[si] + s;\n\n            s ^= s << 13; // 19\n            s ^= s >>> 7; // 25\n\n            k ^= k << 11; // 21\n            k ^= k >>> 8; // 24\n\n            // s >>>= 0;\n            k += s;\n            // k >>>= 0;\n\n            key[ki] = k;\n            salt[si] = s;\n        }\n    }\n\n    return key;\n}\n\nfunction str2buf(str) {\n    if (!str || typeof str.byteLength != 'number') {\n        str = str2buffer(str);\n    }\n    else {\n        str = view8(str);\n    }\n\n    // Make sure the new buffer has a multiple of 4 byteLength\n    const { byteLength } = str;\n    let b = byteLength & 3;\n    let i;\n    // if(b) {\n        b = byteLength + (b && (4 - b));\n        i = new Uint8Array(b);\n        i.set(str);\n    // }\n    // else {\n    //     b = byteLength;\n    //     i = str.slice();\n    // }\n\n    str = new Uint32Array(i.buffer, i.byteOffset, b >> 2);\n    str.dataLength = byteLength;\n\n    return str;\n}\n\n// Unused\n// function buf2str(buf) {\n//     return buffer2str(view8(buf));\n// }\n","// ---------------------------------------------------------------\n/*requires Uint8Array, Uint32Array*/\n// ---------------------------------------------------------------\nimport CycleCrypt from './CycleCrypt';\nimport { str2buffer, view8 } from 'string-encode';\n\ncycleCrypt.CycleCrypt = CycleCrypt;\ncycleCrypt.randomBytes = CycleCrypt.randomBytes;\ncycleCrypt.str2buffer = CycleCrypt.str2buffer;\n\n// ---------------------------------------------------------------\n/**\n * Simple encryption using xor, a key and salt.\n *\n * @param   string|Uint8Array  $key   The encryption key\n * @param   string|Uint8Array  $data  Data to encrypt\n * @param   string|Uint8Array|bool $salt\n *              If a string, use it as salt.\n *              If TRUE, generate salt and prepend it to the encrypted data.\n *              If FALSE, get the salt from the data.\n *\n * @return  Uint8Array  The encrypted data. If $salt is TRUE, the generated salt is prepended to the result.\n */\nexport default function cycleCrypt(key, data, salt = true) {\n\n    // Read salt from input\n    if (salt === false) {\n        data = view8(typeof data == 'string' ? str2buffer(data) : data);\n        let i = data[0];\n        salt = data.slice(1, ++i);\n        data = data.slice(i);\n    }\n    else if (salt === undefined) {\n        salt = true;\n    }\n\n    const cc = new CycleCrypt(key, salt);\n    data = cc._(data);\n\n    // Add the generated salt to the output\n    if (salt === true) {\n        salt = cc.salt;\n        let ret = new Uint8Array(1 + salt.byteLength + data.byteLength);\n        ret[0] = salt.byteLength;\n        ret.set(salt, 1);\n        ret.set(data, 1 + ret[0]);\n        ret.toString = data.toString;\n        data = ret;\n    }\n\n    return data;\n}\n"],"names":["chr","String","fromCharCode","buffer2bin","buf","view8","apply","buffer2str","asUtf8","str","isASCIIRE","test","utf8Decode","undefined","err","str2buffer","m","hasMultibyteRE","exec","hasMultibyte","unescape","encodeURI","utf8Encode","len","length","Uint8Array","charCodeAt","toString","enc","this","bpe","BYTES_PER_ELEMENT","reduce","r","c","padStart","btoa","start","copy","byteLength","buffer","byteOffset","decodeURIComponent","escape","randomBytes","size","ret","words","Uint32Array","ent","Date","now","Math","random","slice","CycleCrypt","key","salt","str2buf","min","_key","rounds","klen","slen","k","s","i","max","ki","si","saltKey","mixKey","$i","b","set","dataLength","cycleCrypt","data","cc","_","Object","defineProperties","prototype","constructor","value","keyByteSize","get"],"mappings":"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"}