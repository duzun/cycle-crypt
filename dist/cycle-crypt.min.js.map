{"version":3,"file":"cycle-crypt.min.js","sources":["../lib/string.js","../lib/randomBytes.js","../cycle-crypt.js"],"sourcesContent":["/*requires Uint8Array*/\n/*globals escape, unescape, encodeURI, decodeURIComponent*/\n\nconst chr = String.fromCharCode;\n\nfunction ord(chr) {\n    return chr.charCodeAt(0);\n}\n\nexport function str2buffer(str, asUtf8) {\n    if(asUtf8 == undefined) {\n        asUtf8 = hasMultibyte(str); // || !isASCII(str)\n    }\n    if (asUtf8) {\n        str = utf8Encode(str);\n    }\n    return new Uint8Array(str.split('').map(ord));\n}\n\nexport function buffer2str(buf, asUtf8) {\n    if(typeof buf == 'string') return buf;\n    if(buf.BYTES_PER_ELEMENT > 1) {\n        buf = new Uint8Array(buf.buffer);\n    }\n    buf = chr.apply(String, buf);\n    if (!isASCII(buf)) {\n        if(asUtf8) {\n            buf = utf8Decode(buf);\n        } else if(asUtf8 == undefined) {\n            try {\n                buf = utf8Decode(buf);\n            } catch(err) {}\n        }\n    }\n    return buf;\n}\n\nexport function toString(enc) {\n    return buffer2str(this, enc && enc == 'utf8');\n}\n\nconst hasMultibyteRE = /([^\\x00-\\xFF]+)/;\nconst isASCIIRE = /^[\\x00-\\x7F]+$/;\n\nexport function hasMultibyte(str) {\n    let m = hasMultibyteRE.exec(str);\n    return m ? m[1] : false;\n}\n\nexport function isASCII(str) {\n    return isASCIIRE.test(str);\n}\n\nexport function utf8Encode(str) {\n    return unescape(encodeURI(str));\n}\n\nexport function utf8Decode(str) {\n    return decodeURIComponent(escape(str));\n}\n","/*requires Uint8Array*/\n\nimport { toString } from \"./string\";\n\nexport default function randomBytes(size) {\n    const bits = -1 >>> 0;\n    const ret = new Uint8Array(size);\n    let ent = Date.now();\n    let len = 0;\n\n    while (len < size) {\n        if ((len & 3) == 0) {\n            ent ^= Math.random() * bits;\n        }\n        ret[len++] = ent & 0xFF;\n        ent >>>= 8;\n    }\n\n    ret.toString = toString;\n    return ret;\n}\n","// ---------------------------------------------------------------\n/*requires Uint8Array, Int32Array*/\n// ---------------------------------------------------------------\nimport randomBytes from './lib/randomBytes';\nimport { str2buffer, buffer2str, toString } from './lib/string';\n\n// const INT32_MASK = -1 >>> 0;\ncycleCrypt.randomBytes = randomBytes;\n\n// ---------------------------------------------------------------\n/**\n * Simple encryption using xor, a key and salt.\n *\n * @param   string|Uint8Array  $key   The encryption key\n * @param   string|Uint8Array  $data  Data to encrypt\n * @param   string|Uint8Array|bool $salt\n *              If a string, use it as salt.\n *              If TRUE, generate salt and prepend it to the encrypted data.\n *              If FALSE, get the salt from the data.\n *\n * @return  Uint8Array  The encrypted data. If $salt is TRUE, the generated salt is prepended to the result.\n */\nexport default function cycleCrypt(key, data, salt = true) {\n    key = str2buf(key);\n    data = typeof data == 'string' ? str2buffer(data) : data;\n    let dataLen = data.byteLength;\n\n    let ret;\n    if (salt === true) {\n        ret = randomBytes(Math.min(256, key.byteLength * 2 + 1) + dataLen);\n        ret[0] = ret.length - 1 - dataLen;\n        salt = ret.slice(1, 1 + ret[0]);\n    }\n    else {\n        if (salt === false) {\n            let i = data[0];\n            salt = data.slice(1, ++i);\n            data = data.slice(i);\n            dataLen = data.byteLength;\n        }\n    }\n    key = cc32_salt_key(key, str2buf(salt));\n\n    if(dataLen & 3) {\n        data = str2buf(data);\n    }\n    else {\n        data = new Int32Array(data.buffer);\n    }\n\n    let len = key.length;\n    let i = 0;\n    data = data.map((b) => {\n        if(i == len) i = 0;\n        if(!i) cc32_mix_key(key);\n        return b ^ key[i++];\n    });\n\n    data = new Uint8Array(data.buffer);\n\n    if(data.byteLength > dataLen) {\n        data = data.slice(0, dataLen);\n    }\n\n    if (ret) {\n        ret.set(data, ret[0] + 1);\n    }\n    else {\n        ret = data;\n    }\n    ret.toString = toString;\n\n    return ret;\n}\n\n/**\n * Use a variation of Xorshift+ to mix the key\n *\n * @param   Int32Array $key List of int32 values representing the key\n * @param   int   $rounds Number of rounds to process the key\n *\n * @return  array A mixed key\n */\nfunction cc32_mix_key(key, rounds = 1) {\n    let len = key.length;\n    let k = len > 1 ? key[len - 1] : 0;\n    while (rounds-- > 0) {\n        for (let $i = len; $i--;) {\n            let ki = $i % len;\n            k = key[ki] + k;\n            k ^= k << 13; // 19\n            k ^= k >> 17; // 15\n            k ^= k << 5; // 27\n            // k &= INT32_MASK;\n            key[ki] = k;\n        }\n    }\n\n    return key;\n}\n\n/**\n * Use a variation of Xorshift+ to salt the key\n *\n * @param   Int32Array $key\n * @param   Int32Array $salt\n * @param   int   $rounds Number of rounds to mix the key\n *\n * @return  array A mixed key\n */\nfunction cc32_salt_key(key, salt, rounds = 1) {\n    let klen = key.length;\n    let slen = salt.length;\n    if (!slen) return key;\n\n    let k = klen > 1 ? key[klen - 1] : 0;\n    let s = slen > 1 ? salt[slen - 1] : 0;\n    while (rounds-- > 0) {\n        for (let i = Math.max(klen, slen); i--;) {\n            let ki = i % klen;\n            let si = i % slen;\n            k = key[ki] + k;\n            s = salt[si] + s;\n\n            s ^= s << 13; // 19\n            s ^= s >> 7; // 25\n\n            k ^= k << 11; // 21\n            k ^= k >> 8; // 24\n\n            k += s;\n\n            // k &= INT32_MASK;\n            // s &= INT32_MASK;\n\n            key[ki] = k;\n            salt[si] = s;\n        }\n    }\n\n    return key;\n}\n\nfunction str2buf(str) {\n    if (!str || typeof str.byteLength != 'number') {\n        str = str2buffer(str);\n    }\n\n    // Make sure the new buffer has a multiple of 4 byteLength\n    let b = str.byteLength & 3;\n    if(b) {\n        b = str.byteLength + 4 - b;\n        str = new Uint8Array(str.buffer);\n        let i = new Uint8Array(b);\n        i.set(str);\n        str = i;\n    }\n    return new Int32Array(str.buffer);\n}\n\nfunction buf2str(buf) {\n    return buffer2str(new Uint8Array(buf.buffer));\n}\n"],"names":["chr","String","fromCharCode","ord","charCodeAt","str2buffer","str","asUtf8","undefined","m","hasMultibyteRE","exec","hasMultibyte","unescape","encodeURI","utf8Encode","Uint8Array","split","map","buffer2str","buf","BYTES_PER_ELEMENT","buffer","apply","isASCIIRE","test","utf8Decode","err","toString","enc","this","decodeURIComponent","escape","randomBytes","size","ret","ent","Date","now","len","Math","random","cycleCrypt","key","data","salt","str2buf","dataLen","byteLength","min","length","slice","i","cc32_salt_key","Int32Array","b","cc32_mix_key","set","rounds","k","$i","ki","klen","slen","s","max","si"],"mappings":"iMAGA,IAAMA,EAAMC,OAAOC,aAEnB,SAASC,EAAIH,UACFA,EAAII,WAAW,GAGnB,SAASC,EAAWC,EAAKC,UACfC,MAAVD,IACCA,EAiCD,SAAsBD,OACrBG,EAAIC,EAAeC,KAAKL,WACrBG,GAAIA,EAAE,GAnCAG,CAAaN,IAEtBC,IACAD,EAuCD,SAAoBA,UAChBO,SAASC,UAAUR,IAxChBS,CAAWT,IAEd,IAAIU,WAAWV,EAAIW,MAAM,IAAIC,IAAIf,IAGrC,SAASgB,EAAWC,EAAKb,MACX,iBAAPa,EAAiB,OAAOA,KAC/BA,EAAIC,kBAAoB,IACvBD,EAAM,IAAIJ,WAAWI,EAAIE,SAE7BF,EAAMpB,EAAIuB,MAAMtB,OAAQmB,GAyBJd,EAxBPc,GAyBNI,EAAUC,KAAKnB,MAxBfC,EACCa,EAAMM,EAAWN,QACd,GAAaZ,MAAVD,MAEFa,EAAMM,EAAWN,GACnB,MAAMO,IAkBb,IAAiBrB,SAfbc,EAGJ,SAASQ,EAASC,UACdV,EAAWW,KAAMD,GAAc,QAAPA,GAGnC,IAAMnB,EAAiB,kBACjBc,EAAY,iBAeX,SAASE,EAAWpB,UAChByB,mBAAmBC,OAAO1B,ICtDtB,SAAS2B,EAAYC,WAE1BC,EAAM,IAAInB,WAAWkB,GACvBE,EAAMC,KAAKC,MACXC,EAAM,EAEHA,EAAML,GACQ,IAAN,EAANK,KACDH,GAAOI,KAAKC,WAPN,IAAM,IAShBN,EAAII,KAAe,IAANH,EACbA,KAAS,SAGbD,EAAIP,SAAWA,EACRO,ECGI,SAASO,EAAWC,EAAKC,OAAMC,6DAC1CF,EAAMG,EAAQH,OAIVR,EAFAY,GADJH,EAAsB,iBAARA,EAAmBvC,EAAWuC,GAAQA,GACjCI,eAGN,IAATH,GACAV,EAAMF,EAAYO,KAAKS,IAAI,IAAsB,EAAjBN,EAAIK,WAAiB,GAAKD,IACtD,GAAKZ,EAAIe,OAAS,EAAIH,EAC1BF,EAAOV,EAAIgB,MAAM,EAAG,EAAIhB,EAAI,aAGf,IAATU,EAAgB,KACZO,EAAIR,EAAK,GACbC,EAAOD,EAAKO,MAAM,IAAKC,GAEvBL,GADAH,EAAOA,EAAKO,MAAMC,IACHJ,WAGvBL,EAAMU,EAAcV,EAAKG,EAAQD,IAG7BD,EADS,EAAVG,EACQD,EAAQF,GAGR,IAAIU,WAAWV,EAAKtB,YAG3BiB,EAAMI,EAAIO,OACVE,EAAI,SACRR,EAAOA,EAAK1B,KAAI,SAACqC,UACVH,GAAKb,IAAKa,EAAI,GACbA,GAAGI,EAAab,GACbY,EAAIZ,EAAIS,SAGnBR,EAAO,IAAI5B,WAAW4B,EAAKtB,SAEnB0B,WAAaD,IACjBH,EAAOA,EAAKO,MAAM,EAAGJ,IAGrBZ,EACAA,EAAIsB,IAAIb,EAAMT,EAAI,GAAK,GAGvBA,EAAMS,EAEVT,EAAIP,SAAWA,EAERO,EAWX,SAASqB,EAAab,WAAKe,yDAAS,EAC5BnB,EAAMI,EAAIO,OACVS,EAAIpB,EAAM,EAAII,EAAIJ,EAAM,GAAK,EAC1BmB,KAAW,OACT,IAAIE,EAAKrB,EAAKqB,KAAO,KAClBC,EAAKD,EAAKrB,EACdoB,EAAIhB,EAAIkB,GAAMF,EACdA,GAAKA,GAAK,GACVA,GAAKA,GAAK,GACVA,GAAKA,GAAK,EAEVhB,EAAIkB,GAAMF,SAIXhB,EAYX,SAASU,EAAcV,EAAKE,OAAMa,yDAAS,EACnCI,EAAOnB,EAAIO,OACXa,EAAOlB,EAAKK,WACXa,EAAM,OAAOpB,UAEdgB,EAAIG,EAAO,EAAInB,EAAImB,EAAO,GAAK,EAC/BE,EAAID,EAAO,EAAIlB,EAAKkB,EAAO,GAAK,EAC7BL,KAAW,OACT,IAAIN,EAAIZ,KAAKyB,IAAIH,EAAMC,GAAOX,KAAM,KACjCS,EAAKT,EAAIU,EACTI,EAAKd,EAAIW,EACbJ,EAAIhB,EAAIkB,GAAMF,EACdK,EAAInB,EAAKqB,GAAMF,EAEfA,GAAKA,GAAK,GAGVL,GAAKA,GAAK,GACVA,GAAKA,GAAK,EAEVA,GALAK,GAAKA,GAAK,EAUVrB,EAAIkB,GAAMF,EACVd,EAAKqB,GAAMF,SAIZrB,EAGX,SAASG,EAAQxC,GACRA,GAAgC,iBAAlBA,EAAI0C,aACnB1C,EAAMD,EAAWC,QAIjBiD,EAAqB,EAAjBjD,EAAI0C,cACTO,EAAG,CACFA,EAAIjD,EAAI0C,WAAa,EAAIO,EACzBjD,EAAM,IAAIU,WAAWV,EAAIgB,YACrB8B,EAAI,IAAIpC,WAAWuC,GACvBH,EAAEK,IAAInD,GACNA,EAAM8C,SAEH,IAAIE,WAAWhD,EAAIgB,eAtJ9BoB,EAAWT,YAAcA"}