{"version":3,"file":"cycle-crypt.js","sources":["../node_modules/string-encode/string-encode.js","../lib/randomBytes.js","../CycleCrypt.js","../cycle-crypt.js"],"sourcesContent":["/**\n * Convert different types of JavaScript String to/from Uint8Array.\n *\n * @author Dumitru Uzun (DUzun.Me)\n * @version 0.2.2\n */\n\n/*requires Uint8Array*/\n/*globals escape, unescape, encodeURI, decodeURIComponent, btoa*/\n\nexport const chr = String.fromCharCode;\n\nexport function ord(chr) {\n    return chr.charCodeAt(0);\n}\n\nexport function buffer2bin(buf) {\n    buf = view8(buf);\n    return chr.apply(String, buf);\n}\n\n/**\n * Get the hex representation of a buffer (TypedArray)\n *\n * @requires String.prototype.padStart()\n *\n * @param   {TypedArray}  buf Uint8Array is desirable, cause it is consistent regardless of the endianness\n *\n * @return  {String} The hex representation of the buf\n */\nexport function buffer2hex(buf) {\n    const bpe = buf.BYTES_PER_ELEMENT << 1;\n    return buf.reduce((r, c) => r += (c >>> 0).toString(16).padStart(bpe,'0'), '');\n}\n\nexport function buffer2str(buf, asUtf8) {\n    if(typeof buf == 'string') return buf;\n    buf = buffer2bin(buf);\n    if (asUtf8 !== false && !isASCII(buf)) {\n        if(asUtf8) {\n            buf = utf8Decode(buf);\n        } else if(asUtf8 == undefined) {\n            try {\n                buf = utf8Decode(buf);\n            } catch(err) {}\n        }\n    }\n    return buf;\n}\n\nexport function str2buffer(str, asUtf8) {\n    str = String(str);\n    if(asUtf8 == undefined) {\n        // Some guessing\n        asUtf8 = hasMultibyte(str); // || !isASCII(str)\n    }\n    if (asUtf8) {\n        str = utf8Encode(str);\n    }\n\n    // Smaller x2\n    // return new Uint8Array(String(str).split('').map(ord));\n\n    // Faster x3-4\n    let len = str.length;\n    const buf = new Uint8Array(len);\n    while(len--) buf[len] = str.charCodeAt(len);\n    return buf;\n}\n\nconst nonHexDigitRE = /[^0-9a-f]/g;\n\n/**\n * Read a hex string into a buffer (Uint8Array), ignoring non-hex chars.\n *\n * @param   {String}  str\n *\n * @return  {Uint8Array}\n */\nexport function hex2buffer(str) {\n    str = str.replace(nonHexDigitRE, '');\n    const len = str.length;\n    const ret = new Uint8Array((len + 1) >>> 1);\n\n    for(let i=0; i<len; i+=2) {\n        ret[i >>> 1] = parseInt(str.slice(i, i+2), 16);\n    }\n\n    return ret;\n}\n\n/**\n * This method is a replacement of Buffer.toString(enc)\n * for Browser, where Buffer is not available.\n *\n * @requires btoa\n *\n * @this {Uint8Array}\n *\n * @param   {String}  enc  'binary' | 'hex' | 'base64' | 'utf8' | undefined\n *\n * @return  {String}\n */\nexport function toString(enc) {\n    // The Node.js equivalent would be something like:\n    // if(typeof Buffer == 'function') {\n    //     if(enc === false) enc = 'binary';\n    //     if(enc === true) enc = 'utf8';\n    //     return Buffer.from(this.buffer, this.byteOffset, this.byteLength).toString(enc);\n    // }\n    switch(enc) {\n        case false:\n        case 'binary': return buffer2bin(this);\n        case 'hex': return buffer2hex(this);\n        case 'base64': return btoa(buffer2bin(this));\n        case 'utf8': enc = true; break;\n    }\n    return buffer2str(this, enc);\n}\n\nexport function view8(buf, start, len) {\n    // If buf is a Buffer, we still want to make it an Uint8Array\n    if(!start && !len && buf instanceof Uint8Array && !buf.copy) return buf;\n    start = start >>> 0;\n    if(len == undefined) len = buf.byteLength - start;\n    return new Uint8Array(buf.buffer, buf.byteOffset+start, len);\n}\n\nlet _isLittleEndian;\nexport function isLittleEndian() {\n    if(_isLittleEndian !== undefined) return _isLittleEndian;\n    _isLittleEndian = !!(new Uint8Array(new Uint16Array([1]).buffer)[0]);\n    isLittleEndian = () => _isLittleEndian;\n    return _isLittleEndian;\n}\n\nexport function switchEndianness32(i) {\n    return (i&0xFF)<<24\n        | (i&0xFF00)<<8\n        | i>>8&0xFF00\n        | i>>24&0xFF\n    ;\n}\n\nexport function guessEncoding(str) {\n    if(hasMultibyte(str)) return 'mb';\n\n    // @todo: test which is faster, utf8bytes() or RegExp\n    if(isHEX(str)) return 'hex';\n    // if(isASCII(str)) return 'ascii';\n    // if(isUTF8(str)) return 'utf8';\n\n    let mbLen = utf8bytes(str);\n    if(mbLen) return 'utf8';\n    if(mbLen === 0) return 'ascii';\n    if(mbLen === false) {\n        mbLen = utf8bytes(str, true);\n        if(mbLen) return '~utf8'; // UTF8, but with async characters at the edges\n    }\n    return 'binary';\n}\n\nconst hasMultibyteRE = /([^\\x00-\\xFF])/;\nconst isHEXRE = /^[0-9a-f\\s]*$/i;\nconst isASCIIRE = /^[\\x00-\\x7F]*$/;\nconst isUTF8RE = /^(?:[\\x00-\\x7F]|[\\xC0-\\xDF][\\x80-\\xBF]|[\\xE0-\\xEF][\\x80-\\xBF][\\x80-\\xBF]|[\\xF0-\\xF7][\\x80-\\xBF][\\x80-\\xBF][\\x80-\\xBF])*$/;\n\nexport function hasMultibyte(str) {\n    let m = hasMultibyteRE.exec(str);\n    return m ? m[1] : false;\n}\n\nexport function isBinary(str) {\n    return !hasMultibyte(str);\n}\n\nexport function isASCII(str) {\n    return isASCIIRE.test(str);\n}\n\nexport function isUTF8(str) {\n    return isUTF8RE.test(str);\n}\n\nexport function isHEX(str) {\n    return isHEXRE.test(str);\n}\n\nexport function utf8bytes(str, allowAsyncChars) {\n    var l = str.length\n    ,   i = 0\n    ,   u = 0\n    ,   c\n    ,   a = -1\n    ,   asy = +!!allowAsyncChars\n    ;\n\n    for( ; i < l ; ) {\n        c = str.charCodeAt(i++);\n        if( c < 0x80 ) continue; // ASCII\n        if( 0xFF <= c ) return false; // has multi-byte\n\n        // async UTF8 character\n        if( (c & 0xC0) == 0x80 ) {\n            // Ignore async UTF8 characters at the beginning\n            if(asy == i) {\n                ++u;\n                ++asy;\n                continue;\n            }\n            return false;\n        }\n\n        // Check sync UTF8 bytes\n        a   = (c & 0xE0) !== 0xC0\n            ? (c & 0xF0) !== 0xE0\n            ? (c & 0xF8) !== 0xF0\n            ? false\n            : 3\n            : 2\n            : 1\n        ;\n        if(!a) return false; // Not an ASCII, nor sync UTF8 bytes\n\n        for( ; (u += 1) && a-- && i < l; ) {\n            c = str.charCodeAt(i++);\n            if((c & 0xC0) !== 0x80) {\n                return false; // Not an ASCII, nor sync UTF8 bytes\n            }\n        }\n    }\n\n    // Ignore async UTF8 characters at the end\n    if(~a && !allowAsyncChars) return false;\n\n    return u;\n}\n\nexport function utf8Encode(str) {\n    return unescape(encodeURI(str));\n}\n\nexport function utf8Decode(str) {\n    return decodeURIComponent(escape(str));\n}\n","/*requires Uint8Array, Uint32Array*/\n\nimport { toString } from 'string-encode';\n\nexport default function randomBytes(size) {\n    const bits = -1 >>> 0;\n\n    let len = size & 3;\n    len = len ? size + 4 - len : size;\n    let ret = new Uint8Array(len);\n    const words = new Uint32Array(ret.buffer);\n    let ent = Date.now();\n\n    len >>= 2;\n    while (len--) {\n        words[len] =\n        ent ^= Math.random() * bits;\n    }\n\n    if(ret.length > size) {\n        ret = ret.slice(0, size);\n    }\n\n    ret.toString = toString;\n    return ret;\n}\n","/*requires Uint8Array, Uint32Array*/\n\nimport randomBytes from './lib/randomBytes';\nimport { str2buffer, view8, toString } from 'string-encode';\n\n/**\n * Variable size symmetric key encryption algorithm.\n * The cipher-key is generated by cycling the input key with a variation of XorShift+ PRNG.\n * The bigger the key-size, the longer the period.\n *\n * @param   {String|ArrayBuffer}  key   The encryption key\n * @param   {String|ArrayBuffer|Boolean} salt\n *              If a string, use it as salt.\n *              If TRUE, generate salt.\n */\nexport default function CycleCrypt(key, salt) {\n    const self = this;\n\n    key = str2buf(key);\n    if (salt === true || salt === undefined) {\n        salt = randomBytes(Math.min(256, key.byteLength << 1));\n    }\n    self.salt = salt;\n    self._key = key = saltKey(key, str2buf(salt));\n}\n\nObject.defineProperties(CycleCrypt.prototype, {\n    constructor: {\n        value: CycleCrypt,\n    },\n\n    /**\n     * Encrypt/decrypt the data and advance the internal state of the cipher-key.\n     *\n     * @param   {String|ArrayBuffer}  data  Data to encrypt\n     *\n     * @return  Uint8Array The encrypted/decrypted data\n     */\n    _: {\n        value: function _(data) {\n            data = str2buf(data);\n            const { dataLength } = data;\n            if (!dataLength) return data;\n\n            const key = this._key;\n            let klen = key.length;\n            let len = data.length;\n            for (let i = 0, k = 0; i < len; ++i, ++k === klen && (k = 0)) {\n                if (!k) mixKey(key);\n                data[i] ^= key[k];\n            }\n\n            data = view8(data, 0, dataLength);\n            data.toString = toString;\n            return data;\n        }\n    },\n\n    /**\n     * Get the number of bytes in the key\n     *\n     * @return  int\n     */\n    keyByteSize: {\n        get() {\n            return this._key.byteLength;\n        }\n    }\n});\n\n// Static methods:\nCycleCrypt.randomBytes = randomBytes; // Uint8Array\nCycleCrypt.toString = toString;\nCycleCrypt.str2buffer = str2buffer; // Uint8Array\nCycleCrypt.str2buf = str2buf; // Uint32Array\n// // CycleCrypt.buf2str = buf2str;\n\n/**\n * Use a variation of Xorshift+ to mix the key\n *\n * @param   Uint32Array $key List of int32 values representing the key\n * @param   int   $rounds Number of rounds to process the key\n *\n * @return  array A mixed key\n */\nfunction mixKey(key, rounds) {\n    let len = key.length;\n    let k = len > 1 ? key[len - 1] : 0;\n\n    if (rounds == undefined) rounds = 1;\n    while (rounds-- > 0) {\n        for (let $i = len; $i--;) {\n            let ki = $i % len;\n            k = key[ki] + k;\n            k ^= k << 13; // 19\n            k ^= k >>> 17; // 15\n            k ^= k << 5; // 27\n            // k >>>= 0;\n            key[ki] = k;\n        }\n    }\n\n    return key;\n}\n\n/**\n * Use a variation of Xorshift+ to salt the key\n *\n * @param   Uint32Array $key\n * @param   Uint32Array $salt\n * @param   int   $rounds Number of rounds to mix the key\n *\n * @return  array A mixed key\n */\nfunction saltKey(key, salt, rounds) {\n    let klen = key.length;\n    let slen = salt.length;\n    if (!slen) return key;\n\n    // make a copy to avoid altering the input salt\n    salt = salt.slice();\n\n    let k = klen > 1 ? key[klen - 1] : 0;\n    let s = slen > 1 ? salt[slen - 1] : 0;\n\n    if (rounds == undefined) rounds = 1;\n    while (rounds-- > 0) {\n        for (let i = Math.max(klen, slen); i--;) {\n            let ki = i % klen;\n            let si = i % slen;\n            k = key[ki] + k;\n            s = salt[si] + s;\n\n            s ^= s << 13; // 19\n            s ^= s >>> 7; // 25\n\n            k ^= k << 11; // 21\n            k ^= k >>> 8; // 24\n\n            // s >>>= 0;\n            k += s;\n            // k >>>= 0;\n\n            key[ki] = k;\n            salt[si] = s;\n        }\n    }\n\n    return key;\n}\n\nfunction str2buf(str) {\n    if (!str || typeof str.byteLength != 'number') {\n        str = str2buffer(str);\n    }\n    else {\n        str = view8(str);\n    }\n\n    // Make sure the new buffer has a multiple of 4 byteLength\n    const { byteLength } = str;\n    let b = byteLength & 3;\n    let i;\n    // if(b) {\n        b = byteLength + (b && (4 - b));\n        i = new Uint8Array(b);\n        i.set(str);\n    // }\n    // else {\n    //     b = byteLength;\n    //     i = str.slice();\n    // }\n\n    str = new Uint32Array(i.buffer, i.byteOffset, b >> 2);\n    str.dataLength = byteLength;\n\n    return str;\n}\n\n// Unused\n// function buf2str(buf) {\n//     return buffer2str(view8(buf));\n// }\n","// ---------------------------------------------------------------\n/*requires Uint8Array, Uint32Array*/\n// ---------------------------------------------------------------\nimport CycleCrypt from './CycleCrypt';\nimport { str2buffer, view8 } from 'string-encode';\n\ncycleCrypt.CycleCrypt = CycleCrypt;\ncycleCrypt.randomBytes = CycleCrypt.randomBytes;\ncycleCrypt.str2buffer = CycleCrypt.str2buffer;\n\n// ---------------------------------------------------------------\n/**\n * Simple encryption using xor, a key and salt.\n *\n * @param   string|Uint8Array  $key   The encryption key\n * @param   string|Uint8Array  $data  Data to encrypt\n * @param   string|Uint8Array|bool $salt\n *              If a string, use it as salt.\n *              If TRUE, generate salt and prepend it to the encrypted data.\n *              If FALSE, get the salt from the data.\n *\n * @return  Uint8Array  The encrypted data. If $salt is TRUE, the generated salt is prepended to the result.\n */\nexport default function cycleCrypt(key, data, salt = true) {\n\n    // Read salt from input\n    if (salt === false) {\n        data = view8(typeof data == 'string' ? str2buffer(data) : data);\n        let i = data[0];\n        salt = data.slice(1, ++i);\n        data = data.slice(i);\n    }\n    else if (salt === undefined) {\n        salt = true;\n    }\n\n    const cc = new CycleCrypt(key, salt);\n    data = cc._(data);\n\n    // Add the generated salt to the output\n    if (salt === true) {\n        salt = cc.salt;\n        let ret = new Uint8Array(1 + salt.byteLength + data.byteLength);\n        ret[0] = salt.byteLength;\n        ret.set(salt, 1);\n        ret.set(data, 1 + ret[0]);\n        ret.toString = data.toString;\n        data = ret;\n    }\n\n    return data;\n}\n"],"names":["chr","String","fromCharCode","buffer2bin","buf","view8","apply","buffer2hex","bpe","BYTES_PER_ELEMENT","reduce","r","c","toString","padStart","buffer2str","asUtf8","isASCII","utf8Decode","undefined","err","str2buffer","str","hasMultibyte","utf8Encode","len","length","Uint8Array","charCodeAt","enc","btoa","start","copy","byteLength","buffer","byteOffset","hasMultibyteRE","isASCIIRE","m","exec","test","unescape","encodeURI","decodeURIComponent","escape","randomBytes","size","bits","ret","words","Uint32Array","ent","Date","now","Math","random","slice","CycleCrypt","key","salt","self","str2buf","min","_key","saltKey","Object","defineProperties","prototype","constructor","value","_","data","dataLength","klen","i","k","mixKey","keyByteSize","get","rounds","$i","ki","slen","s","max","si","b","set","cycleCrypt","cc"],"mappings":"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"}