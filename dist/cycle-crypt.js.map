{"version":3,"file":"cycle-crypt.js","sources":["../lib/string.js","../lib/randomBytes.js","../cycle-crypt.js"],"sourcesContent":["/*requires Uint8Array*/\n/*globals escape, unescape, encodeURI, decodeURIComponent*/\n\nconst chr = String.fromCharCode;\n\nfunction ord(chr) {\n    return chr.charCodeAt(0);\n}\n\nexport function str2buffer(str, asUtf8) {\n    if(asUtf8 == undefined) {\n        asUtf8 = hasMultibyte(str); // || !isASCII(str)\n    }\n    if (asUtf8) {\n        str = utf8Encode(str);\n    }\n    return new Uint8Array(str.split('').map(ord));\n}\n\nexport function buffer2str(buf, asUtf8) {\n    if(typeof buf == 'string') return buf;\n    if(buf.BYTES_PER_ELEMENT > 1) {\n        buf = new Uint8Array(buf.buffer);\n    }\n    buf = chr.apply(String, buf);\n    if (!isASCII(buf)) {\n        if(asUtf8) {\n            buf = utf8Decode(buf);\n        } else if(asUtf8 == undefined) {\n            try {\n                buf = utf8Decode(buf);\n            } catch(err) {}\n        }\n    }\n    return buf;\n}\n\nexport function toString(enc) {\n    return buffer2str(this, enc && enc == 'utf8');\n}\n\nconst hasMultibyteRE = /([^\\x00-\\xFF]+)/;\nconst isASCIIRE = /^[\\x00-\\x7F]+$/;\n\nexport function hasMultibyte(str) {\n    let m = hasMultibyteRE.exec(str);\n    return m ? m[1] : false;\n}\n\nexport function isASCII(str) {\n    return isASCIIRE.test(str);\n}\n\nexport function utf8Encode(str) {\n    return unescape(encodeURI(str));\n}\n\nexport function utf8Decode(str) {\n    return decodeURIComponent(escape(str));\n}\n","/*requires Uint8Array*/\n\nimport { toString } from \"./string\";\n\nexport default function randomBytes(size) {\n    const bits = -1 >>> 0;\n    const ret = new Uint8Array(size);\n    let ent = Date.now();\n    let len = 0;\n\n    while (len < size) {\n        if ((len & 3) == 0) {\n            ent ^= Math.random() * bits;\n        }\n        ret[len++] = ent & 0xFF;\n        ent >>>= 8;\n    }\n\n    ret.toString = toString;\n    return ret;\n}\n","// ---------------------------------------------------------------\n/*requires Uint8Array, Int32Array*/\n// ---------------------------------------------------------------\nimport randomBytes from './lib/randomBytes';\nimport { str2buffer, buffer2str, toString } from './lib/string';\n\n// const INT32_MASK = -1 >>> 0;\ncycleCrypt.randomBytes = randomBytes;\n\n// ---------------------------------------------------------------\n/**\n * Simple encryption using xor, a key and salt.\n *\n * @param   string|Uint8Array  $key   The encryption key\n * @param   string|Uint8Array  $data  Data to encrypt\n * @param   string|Uint8Array|bool $salt\n *              If a string, use it as salt.\n *              If TRUE, generate salt and prepend it to the encrypted data.\n *              If FALSE, get the salt from the data.\n *\n * @return  Uint8Array  The encrypted data. If $salt is TRUE, the generated salt is prepended to the result.\n */\nexport default function cycleCrypt(key, data, salt = true) {\n    key = str2buf(key);\n    data = typeof data == 'string' ? str2buffer(data) : data;\n    let dataLen = data.byteLength;\n\n    let ret;\n    if (salt === true) {\n        ret = randomBytes(Math.min(256, key.byteLength * 2 + 1) + dataLen);\n        ret[0] = ret.length - 1 - dataLen;\n        salt = ret.slice(1, 1 + ret[0]);\n    }\n    else {\n        if (salt === false) {\n            let i = data[0];\n            salt = data.slice(1, ++i);\n            data = data.slice(i);\n            dataLen = data.byteLength;\n        }\n    }\n    key = cc32_salt_key(key, str2buf(salt));\n\n    if(dataLen & 3) {\n        data = str2buf(data);\n    }\n    else {\n        data = new Int32Array(data.buffer);\n    }\n\n    let len = key.length;\n    let i = 0;\n    data = data.map((b) => {\n        if(i == len) i = 0;\n        if(!i) cc32_mix_key(key);\n        return b ^ key[i++];\n    });\n\n    data = new Uint8Array(data.buffer);\n\n    if(data.byteLength > dataLen) {\n        data = data.slice(0, dataLen);\n    }\n\n    if (ret) {\n        ret.set(data, ret[0] + 1);\n    }\n    else {\n        ret = data;\n    }\n    ret.toString = toString;\n\n    return ret;\n}\n\n/**\n * Use a variation of Xorshift+ to mix the key\n *\n * @param   Int32Array $key List of int32 values representing the key\n * @param   int   $rounds Number of rounds to process the key\n *\n * @return  array A mixed key\n */\nfunction cc32_mix_key(key, rounds = 1) {\n    let len = key.length;\n    let k = len > 1 ? key[len - 1] : 0;\n    while (rounds-- > 0) {\n        for (let $i = len; $i--;) {\n            let ki = $i % len;\n            k = key[ki] + k;\n            k ^= k << 13; // 19\n            k ^= k >> 17; // 15\n            k ^= k << 5; // 27\n            // k &= INT32_MASK;\n            key[ki] = k;\n        }\n    }\n\n    return key;\n}\n\n/**\n * Use a variation of Xorshift+ to salt the key\n *\n * @param   Int32Array $key\n * @param   Int32Array $salt\n * @param   int   $rounds Number of rounds to mix the key\n *\n * @return  array A mixed key\n */\nfunction cc32_salt_key(key, salt, rounds = 1) {\n    let klen = key.length;\n    let slen = salt.length;\n    if (!slen) return key;\n\n    let k = klen > 1 ? key[klen - 1] : 0;\n    let s = slen > 1 ? salt[slen - 1] : 0;\n    while (rounds-- > 0) {\n        for (let i = Math.max(klen, slen); i--;) {\n            let ki = i % klen;\n            let si = i % slen;\n            k = key[ki] + k;\n            s = salt[si] + s;\n\n            s ^= s << 13; // 19\n            s ^= s >> 7; // 25\n\n            k ^= k << 11; // 21\n            k ^= k >> 8; // 24\n\n            k += s;\n\n            // k &= INT32_MASK;\n            // s &= INT32_MASK;\n\n            key[ki] = k;\n            salt[si] = s;\n        }\n    }\n\n    return key;\n}\n\nfunction str2buf(str) {\n    if (!str || typeof str.byteLength != 'number') {\n        str = str2buffer(str);\n    }\n\n    // Make sure the new buffer has a multiple of 4 byteLength\n    let b = str.byteLength & 3;\n    if(b) {\n        b = str.byteLength + 4 - b;\n        str = new Uint8Array(str.buffer);\n        let i = new Uint8Array(b);\n        i.set(str);\n        str = i;\n    }\n    return new Int32Array(str.buffer);\n}\n\nfunction buf2str(buf) {\n    return buffer2str(new Uint8Array(buf.buffer));\n}\n"],"names":["chr","String","fromCharCode","ord","charCodeAt","str2buffer","str","asUtf8","undefined","hasMultibyte","utf8Encode","Uint8Array","split","map","buffer2str","buf","BYTES_PER_ELEMENT","buffer","apply","isASCII","utf8Decode","err","toString","enc","hasMultibyteRE","isASCIIRE","m","exec","test","unescape","encodeURI","decodeURIComponent","escape","randomBytes","size","bits","ret","ent","Date","now","len","Math","random","cycleCrypt","key","data","salt","str2buf","dataLen","byteLength","min","length","slice","i","cc32_salt_key","Int32Array","b","cc32_mix_key","set","rounds","k","$i","ki","klen","slen","s","max","si"],"mappings":"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"}